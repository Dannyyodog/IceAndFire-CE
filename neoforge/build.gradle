plugins {
    id 'com.github.johnrengelman.shadow'
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

architectury {
    platformSetupLoomIde()
    neoForge()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    neoForge "net.neoforged:neoforge:$rootProject.neoforge_version"

    // Architectury API. This is optional, and you can comment it out if you don't need it.
    modImplementation "dev.architectury:architectury-neoforge:$rootProject.architectury_api_version"

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionNeoForge')
    modImplementation(include("com.github.IAFEnvoy.Integration:integration-neoforge:$integration_version"))

    modImplementation "maven.modrinth:uranus:BBb3HOQ5"
    modImplementation "maven.modrinth:jupiter:I4i9vhEW"

    modLocalRuntime "dev.emi:emi-neoforge:$emi_version"

    modImplementation "maven.modrinth:jade:JkFFfEao"

    //ProjectE
    modApi "curse.maven:projecte-226410:6611984"

    modCompileOnly "net.createmod.ponder:Ponder-NeoForge-$minecraft_version:$ponder_version"

    modCompileOnly "curse.maven:touhou-little-maid-355044:6911706"

    // Ars Nouveau
    modImplementation "com.hollingsworth.ars_nouveau:ars_nouveau-$minecraft_version:$ars_version"
    modImplementation "software.bernie.geckolib:geckolib-neoforge-$minecraft_version:$geckolib_version"
    modImplementation "top.theillusivec4.curios:curios-neoforge:$curios_version"
}

processResources {
    inputs.property 'version', project.version

    filesMatching('META-INF/neoforge.mods.toml') {
        expand version: project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    atAccessWideners.add("iceandfire.accesswidener")
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
}
